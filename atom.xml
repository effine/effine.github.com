<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>追求优雅代码而不断受打击的艺术家</title>
  <icon>https://www.gravatar.com/avatar/5f7e4b54b5cd1a7a91eedae0578dafa7</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://effine.cn/"/>
  <updated>2022-05-26T15:53:06.000Z</updated>
  <id>http://effine.cn/</id>
  
  <author>
    <name>effine</name>
    <email>iballad@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《Java编程的逻辑》-二进制</title>
    <link href="http://effine.cn/2022/05/26/ProgrammingLogic4Java/"/>
    <id>http://effine.cn/2022/05/26/ProgrammingLogic4Java/</id>
    <published>2022-05-26T15:53:06.000Z</published>
    <updated>2022-05-26T15:53:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>  作者：马俊昌<br>  出版时间：2018年1月</p><img src="/imgs/article/programmingLogic4Java.png" alt="Java编程的逻辑" /> <p>记录阅读中缺失或遗忘的知识点，强化记忆；</p><span id="more"></span><p>。JDK7+提供十进制转换为其他进制方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 十转换为二进制，结果: 1111011</span></span><br><span class="line">Integer.toBinaryString(<span class="number">123</span>);  </span><br><span class="line">Long.toBinaryString(<span class="number">123L</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 十转换为八进制，结果: 173</span></span><br><span class="line">Integer.toOctalString(<span class="number">123</span>); </span><br><span class="line">Long.toOctalString(<span class="number">123L</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 十转换为十六进制，结果: 7b</span></span><br><span class="line">Integer.toHexString(<span class="number">123</span>); </span><br><span class="line">Long.toHexString(<span class="number">123L</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 十转换为指定进制（如十三进制），结果: 96</span></span><br><span class="line">Integer.toString(<span class="number">123</span>, <span class="number">13</span>); </span><br><span class="line">Long.toString(<span class="number">123L</span>, <span class="number">13</span>); </span><br></pre></td></tr></table></figure><p>.##### java补码 源码</p><p>。按位操作</p><p>  位运算有移位运算和逻辑运算。移位有以下几种。<br>  1）左移：操作符为&lt;&lt;，向左移动，右边的低位补0，高位的就舍弃掉了，将二进制看作整数，左移1位就相当于乘以2。2）无符号右移：操作符为&gt;&gt;&gt;，向右移动，右边的舍弃掉，左边补0。<br>  3）有符号右移：操作符为&gt;&gt;，向右移动，右边的舍弃掉，左边补什么取决于原来最高位是什么，原来是1就补1，原来是0就补0，将二进制看作整数，右移1位相当于除以2。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  作者：马俊昌&lt;br&gt;  出版时间：2018年1月&lt;/p&gt;
&lt;img src=&quot;/imgs/article/programmingLogic4Java.png&quot; alt=&quot;Java编程的逻辑&quot; /&gt; 


&lt;p&gt;记录阅读中缺失或遗忘的知识点，强化记忆；&lt;/p&gt;
    
    </summary>
    
      <category term="阅读" scheme="http://effine.cn/categories/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="阅读" scheme="http://effine.cn/tags/%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>《高效阅读》</title>
    <link href="http://effine.cn/2022/05/24/EfficientReading/"/>
    <id>http://effine.cn/2022/05/24/EfficientReading/</id>
    <published>2022-05-24T02:09:29.000Z</published>
    <updated>2022-05-24T02:09:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>  作者：（日）渡边康弘；金磊（译）<br>  出版时间：2017年11月</p><img src="/imgs/readGuide/park.png" alt="高效阅读" /> <p>阅读本书时，摘抄了书中具有指导意义的方法，并再文末做了适合自己的方法，指导后续阅读；</p><p>作者给出了阅读前的建议：</p><ul><li>阅读之前不要看书的目录，避免被作者的编排让自己有了一个思维定式</li><li>阅读的思路：先通篇粗度-&gt; 记录自己感兴趣的知识 -&gt; 针对性的细读</li></ul><span id="more"></span> <p>共振阅读法中的5步共鸣<br>步骤0：接触书本，明确自己的目的。<br>步骤1：通过随意翻阅，让大脑“下载”信息。<br>步骤2：在三栏表格中绘制曲线。<br>步骤3：从曲线中感兴趣的那一页上摘出单词。<br>步骤4：凭着感兴趣的单词，带着问题去阅读。<br>步骤5：基于从这本书中所获得的想法，制订出行动计划</p><p>（根据以上步骤我的理解：通过绘制曲线发现自己对书中哪些部分感兴趣，然后挑选关键词进行细度，如果觉得内容引人入胜无需考虑必须在规定时间读完，继续深度即可；完成全书粗度后，需要制定计划和写出你的心得及想法，便于回顾）</p><p>进入到“共振阅读”的准备阶段“步骤0”。先从“记下书名”开始，依次按顺序在①～⑥的位置上记录信息：</p><p> ①写下阅读的目的<br> <img src="/imgs/article/efficientReading.png" alt="阅读的目的" /><br> ②写下页数<br> ③写下作者的名字、绘制出画像或者画个“笑脸”的表情<br> ④随意翻阅，对书中内容进行大致浏览<br> ⑤将从作者那里接收到的信息，简短地写下来<br> ⑥作者为什么必须写作这本书？</p><p>写作的建议：</p><p> ①首先尝试直接“放松”地打草稿<br> ②在撰写书评时，要设想一个读者对象<br> ③“放松”地进行整理<br> ④在文章中加入我们自己的风格特点，并尝试大声朗读出来</p><p>制定行动计划：</p><p> ①看着“共振地图”，寻找与“人”或“事”有关的提示<br> ②从书中的语句联想到提示<br> ③将行动计划记到日程表中<br> ④将计划付诸行动</p><p>参加读书会、学习会的三个好处:</p><p> ·能结识志同道合的朋友。<br> ·能从他人那里了解到与自己不同的观点。<br> ·交流分享我们所学到的东西。</p><p>拓展自己专业领域的方法：</p><p> 1．思考拓展自己专业领域的目的<br> 2．去大型书店逛逛<br> 3．购买8本关于该专业领域的书籍，以及2本非该专业领域的书籍</p><p>通过“共振阅读”掌握专业性知识的步骤</p><p> ①设定阅读的目的。<br> ②将所有的书籍拍到一张照片中。<br> ③随意翻阅所有的书籍，然后休息。<br> ④找出“共振词汇”。<br> ⑤从书中找出与之关联的内容。<br> ⑥用自己的话进行总结。<br> ⑦想出自己的“关键词”。<br> ⑧利用这些“关键词”找到新的切入口（意见）。<br> ⑨基于新的切入口，撰写报告或笔记。</p><p>3年后的你</p><p> Who（谁）和谁在一起？<br> Where（场合）在什么样的场合？<br> When（时间）3年后的几月几日？<br> What（做的事情）在做什么？<br> Why（原因）为什么要做那件事？<br> How（方法）怎样做才能实现？</p><p>看完本书，我反思了自己及获得的一些感悟：</p><p>。去研究其他的粗度方法，找到适合自己的方式<br>。分享自己读书的经历，以前不知道怎么读书？就是按许三多似的方法（从A看到Z）；现在知道带着问题去看书，而且问题需要明确在脑子中反复浮现多遍、最好是在纸上写下来，方便最后回头过来分析<br>。读书在于形成理论，优化自己的思维体系，指导自己今后的行动；所以，重在最后的行动<br>。整理细自己的读书路径，使用钢笔将阅读的精髓记录，便于记忆（没有条件，可以使用网络读书笔记）</p><pre><code>1.写下书名、作者、国家、年代、背景（加深记忆，了解本书创作环境）2.提出多个问题（我需要从书中获得哪些知识）3.按书中的共振阅读法找出关键点：    a.找出感兴趣的章节、页数    b.根据第一次的筛选，找出感兴趣的词汇    c.对关键词汇进行扩展阅读；钢笔或者网络笔记记录感兴趣的句子或思想    d.找到前面提出问题的答案4.完成全书阅读后，参考书的目录，写出自己的感想及心得；分析与提出问题时的对比，得出总结性的心得；确定该书是否需要细读5.总结所获得的帮助，结合自己的人生、经历</code></pre><p>总之，阅读的目的是为了与作者对话，达到与之沟通及思想的碰撞；你可以想象一下作者就坐在你身边，与你平等的进行交流，探讨书中的观点与实例；你可以提出自己的见解，在书中寻找答案，形成自己的思维体系，指导我们更好的生活及工作。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  作者：（日）渡边康弘；金磊（译）&lt;br&gt;  出版时间：2017年11月&lt;/p&gt;
&lt;img src=&quot;/imgs/readGuide/park.png&quot; alt=&quot;高效阅读&quot; /&gt; 

&lt;p&gt;阅读本书时，摘抄了书中具有指导意义的方法，并再文末做了适合自己的方法，指导后续阅读；&lt;/p&gt;
&lt;p&gt;作者给出了阅读前的建议：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;阅读之前不要看书的目录，避免被作者的编排让自己有了一个思维定式&lt;/li&gt;
&lt;li&gt;阅读的思路：先通篇粗度-&amp;gt; 记录自己感兴趣的知识 -&amp;gt; 针对性的细读&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="阅读" scheme="http://effine.cn/categories/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="阅读" scheme="http://effine.cn/tags/%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>一文讲透微服务架构</title>
    <link href="http://effine.cn/2022/05/23/MicroserviceArchitecture4OneArticle/"/>
    <id>http://effine.cn/2022/05/23/MicroserviceArchitecture4OneArticle/</id>
    <published>2022-05-23T09:32:09.000Z</published>
    <updated>2022-05-23T09:32:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>  作者以轻松风趣的语言将微服务的整个演变流程讲得十分透彻，可以作为微服务搭建的教科书，所以转载过来供大家参考阅读，文中涉及的技术点可以扩展研究，对自己技术能力的提升十分有益。</p><p>  原文链接：<a href="https://www.cnblogs.com/skabyy/p/11396571.html">https://www.cnblogs.com/skabyy/p/11396571.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;  作者以轻松风趣的语言将微服务的整个演变流程讲得十分透彻，可以作为微服务搭建的教科书，所以转载过来供大家参考阅读，文中涉及的技术点可以扩展研究，对自己技术能力的提升十分有益。&lt;/p&gt;
&lt;p&gt;  原文链接：&lt;a href=&quot;https://www.cnblogs.com/s
      
    
    </summary>
    
      <category term="架构" scheme="http://effine.cn/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="架构" scheme="http://effine.cn/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="微服务" scheme="http://effine.cn/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>《中国大趋势4：中国经济未来十年》</title>
    <link href="http://effine.cn/2022/05/17/ChinaTrend4FutureTenYears/"/>
    <id>http://effine.cn/2022/05/17/ChinaTrend4FutureTenYears/</id>
    <published>2022-05-17T03:45:11.000Z</published>
    <updated>2022-05-17T03:45:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>  作者：高连奎<br>  出版时间：2012年2月</p><p>高福利社会需要高税收来支持</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;  作者：高连奎&lt;br&gt;  出版时间：2012年2月&lt;/p&gt;
&lt;p&gt;高福利社会需要高税收来支持&lt;/p&gt;

      
    
    </summary>
    
      <category term="阅读" scheme="http://effine.cn/categories/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="阅读" scheme="http://effine.cn/tags/%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>《私域流量：0到1搭建私域流量池的方法论》</title>
    <link href="http://effine.cn/2022/05/13/0To1PrivateDomainTraffic/"/>
    <id>http://effine.cn/2022/05/13/0To1PrivateDomainTraffic/</id>
    <published>2022-05-13T01:44:15.000Z</published>
    <updated>2022-05-13T01:44:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者：祝福</p><p>阅读时需要问自己的问题：<br>.为什么要搭建私域流量？<br>.怎么搭建私域流量？<br>.怎么运营私域流量？<br>.怎么变现？</p><p>本书上半部分阅读比较细，获得并记忆了作者传递的一些观点，下半部分则实在无法继续细读下去，因为太过于繁杂；我获得的几个观点：</p><pre><code>.视用户为朋友，而非韭菜（看中长期价值，而非收割一次就放弃）.连接用户 -&gt; 筛选用户 -&gt; 服务用户.重视传播学.标签为王，内容为后（重视原创，打造高质量内容，强化标签记忆，重视传播）</code></pre><span id="more"></span><p>本书强调的是以朋友圈、群来构建自己的私域流量，本书发表时（2020年7月）企业微信早已布局私域，打通和微信好友的沟通，我觉得这个可以拿出来聊一聊。同时，针对阅读本书开始的问题我来说说自己的看法：</p><p>.为什么要搭建私域流量？</p><pre><code>  在当前信息流量爆炸的时代，各种信息满天飞，人们得花时间筛选信息的有效性；同时，因为碎片阅读让人们的时间被分隔为各种片段；在这种泛流量横行的时候，用户及企业需要构建自己的有效流量池（私域流量），增强用户的粘性，打造用户的长期价值；   所以，企业都开始打造各自的私域流量（企业微信、抖音快手粉丝群、知识星球等），同时企业开始打造高质量用户，推出各种会员服务（山姆会员、盒马会员、京东会员等），筛选泛流量中真正能转换为订单的用户，服务好这部分用户。</code></pre><p>。怎么搭建私域流量？</p><p>   简单列举几种常见的私域场景：</p><pre><code>.企业微信: 无缝对接微信.抖音/快手粉丝群：沉淀日常对短视频知识或行业感兴趣的用户.知识星球</code></pre><p>。怎么运营私域流量？</p><pre><code>暂时也不知道，待学习</code></pre><p>。怎么变现？</p><pre><code>以我比较熟悉的企业微信来说，可以提供营销及管理工具来实现变现；对接企微提供的各种API，来服务企业主，方便企业主运营用户，同时维护用户行为数据，给企业主提供数据分析指导其二次运营。</code></pre><p>一些思考：<br>。怎么把私域的企微账号当着个人微信号来运营？<br>。做私域工具比直接运营私域更挣钱（毕竟教人挣钱比直接挣钱更容易挣钱）<br>。私域工具给别人使用的时候，如果收集到的客户需求被采用，上线后可以给他们免费体验一段时间，在需求界面上可以给用户身份曝光，让其觉得尊贵和重要</p><p>可以以企微为切入口，实现一个MVP项目对接企业主闭环流程，然后逐步迭代实现变现；若一个企业主对接进入疲软期，可以对接多个企业主，将系统扩展支持多业态多用户，实现灵活变现。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者：祝福&lt;/p&gt;
&lt;p&gt;阅读时需要问自己的问题：&lt;br&gt;.为什么要搭建私域流量？&lt;br&gt;.怎么搭建私域流量？&lt;br&gt;.怎么运营私域流量？&lt;br&gt;.怎么变现？&lt;/p&gt;
&lt;p&gt;本书上半部分阅读比较细，获得并记忆了作者传递的一些观点，下半部分则实在无法继续细读下去，因为太过于繁杂；我获得的几个观点：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.视用户为朋友，而非韭菜（看中长期价值，而非收割一次就放弃）
.连接用户 -&amp;gt; 筛选用户 -&amp;gt; 服务用户
.重视传播学
.标签为王，内容为后（重视原创，打造高质量内容，强化标签记忆，重视传播）
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="阅读" scheme="http://effine.cn/categories/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="阅读" scheme="http://effine.cn/tags/%E9%98%85%E8%AF%BB/"/>
    
      <category term="私域" scheme="http://effine.cn/tags/%E7%A7%81%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>《穷爸爸富爸爸》</title>
    <link href="http://effine.cn/2022/05/12/RichDadPoorDad/"/>
    <id>http://effine.cn/2022/05/12/RichDadPoorDad/</id>
    <published>2022-05-12T15:14:27.000Z</published>
    <updated>2022-05-12T15:14:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>  这算是一本理财启蒙的书籍，建议每一个人去阅读，打开你对金钱的理解，提升财商；</p><p>  几天的阅读，得到几个记忆深刻的观点：</p><pre><code>1.资产是能把钱放进我口袋里的东西，负债是把钱从我口袋里取走的东西2.事业与职业的区别    事业：不需要你亲自到现场就能给你带来资产（钱进入口袋）    职业：给别人打工，通过劳动所得</code></pre><p>  本书建议我们如何行动？</p><ol><li>找一个超现实的理由——精神的力量</li><li>每天做出选择——选择的力量</li><li>慎重地选择朋友——关系的力量</li><li>掌握一种模式，然后再学习一种新的模式——快速学习的力量</li><li>首先支付自己——自律的力量</li><li>给你的经纪人以优厚的报酬——好建议的力量</li><li>做一个“印第安给予者”——无私的力量</li><li>用资产来购买奢侈品——专注的力量</li><li>对英雄的崇拜——神话的力量</li><li>先予后取——给予的力量</li></ol><p>  作者是如何行动的？</p><ol><li>停下你手头的活儿（思考，你目前所做的事情是否有意义）</li><li>寻找新的思想（书店）</li><li>找一些做过你想做的事情的人（找师傅）</li><li>上辅导班、读书或参加研讨会（验证想法、找志同道合的人、找师傅）</li><li>提出多份报价（投资需要了解投资对象，货比三家给你合理的报价）</li><li>每月在某一地区慢跑、散步或驾车10分钟左右（了解投资对象的外部环境）</li><li>购买特价商品（低价买入投资对象）</li><li>关注适当的地方</li><li>我首先寻找想买进的人，然后才去找想卖出的人</li></ol><p>  根据书中的建议，我应该会重点涉猎两类知识：</p><pre><code>  。财务知识：了解金钱的本质、现金流的运行方式等  。法律知识：理财实践中，摸清法律规范，最大化收益率</code></pre><p>  依据理财理念，我的人生规划应该会是这样的大致方向：</p><pre><code>1. 让钱为我工作        上班获得理财基金，然后去做让钱生钱的事情；可以尝试先做MVP的事情，验证后让其闭环，    无需人工干预即可实现被动收入（如购买优质银行理财产品、基金、股票等），    不断优化你的策略实现高效益的复利增长2. 打造自己的事业      通过第一步我们可以获得稳定的现金流后，不应该再是单兵作战，应该组建团队发挥群众效应，    然利益持续最大化3. 帮助他人，传道授业</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;  这算是一本理财启蒙的书籍，建议每一个人去阅读，打开你对金钱的理解，提升财商；&lt;/p&gt;
&lt;p&gt;  几天的阅读，得到几个记忆深刻的观点：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1.资产是能把钱放进我口袋里的东西，负债是把钱从我口袋里取走的东西
2.事业与职业的区别
    事业：不
      
    
    </summary>
    
      <category term="阅读" scheme="http://effine.cn/categories/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="阅读" scheme="http://effine.cn/tags/%E9%98%85%E8%AF%BB/"/>
    
      <category term="理财" scheme="http://effine.cn/tags/%E7%90%86%E8%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>iTerm 快捷键</title>
    <link href="http://effine.cn/2017/03/24/ITermShortcut/"/>
    <id>http://effine.cn/2017/03/24/ITermShortcut/</id>
    <published>2017-03-24T06:28:52.000Z</published>
    <updated>2022-05-12T14:21:01.696Z</updated>
    
    <content type="html"><![CDATA[<p>Iterm 是Mac下必不可少的工具，它的各种特性及使用便捷性甩Mac自带的终端工具terminal几亿光年，前提是你必须收下其常用快捷键：</p><pre><code>$ command + /           # 查看光标位置$ command + T/W     # 新建/关闭标签$ command + 数字/方向键    # 切换标签$ command + enter       # 全屏/退出全屏$ command + F   # 当前窗口查找，tab键选中找到的文本，option + enter 粘贴光标处$ command + option + B  # 回放功能$ command + option + E  # 搜索所有的窗口标签Tabs$ command + D           # 竖向分屏 $ command + shift + D   # 横向分屏$ command + option + 方向键/&#39;[&#39;及&#39;]&#39;    # 切换屏幕$ command + ;   # 历史命令、自动匹配提示(根据上下文呼出来提示)$ command + shift + H   # 列举粘贴历史$ ctrl + U      # 清除当前行$ ctrl + A      # 到行首$ ctrl + E      # 到行尾$ ctrl + F/B    # 前进/后退(相当于左右方向键)$ ctrl + P      # 上一条命令$ ctrl + R      # 搜索历史命令$ ctrl + D      # 删除当前光标的字符$ ctrl + H      # 删除光标之前的字符$ ctrl + w      # 删除光标之前的单词$ ctrl + K      # 删除到文本末尾$ ctrl + T      # 交换光标处文本$ command + R   # 清屏$ ctrl + L      # 清屏</code></pre><p>必备技巧：</p><ul><li>选中即复制，然后选择目标位置粘贴(command + v)即可</li><li>具体配置参考： Profiles -&gt; open profiles</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Iterm 是Mac下必不可少的工具，它的各种特性及使用便捷性甩Mac自带的终端工具terminal几亿光年，前提是你必须收下其常用快捷键：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ command + /           # 查看光标位置
$ command + T/W   
      
    
    </summary>
    
      <category term="tools" scheme="http://effine.cn/categories/tools/"/>
    
    
      <category term="tools" scheme="http://effine.cn/tags/tools/"/>
    
      <category term="iterm" scheme="http://effine.cn/tags/iterm/"/>
    
  </entry>
  
  <entry>
    <title>Zookeeper 安装及配置</title>
    <link href="http://effine.cn/2017/03/02/ZookeeperInstallAndConfig/"/>
    <id>http://effine.cn/2017/03/02/ZookeeperInstallAndConfig/</id>
    <published>2017-03-02T15:33:37.000Z</published>
    <updated>2022-05-12T14:21:01.693Z</updated>
    
    <content type="html"><![CDATA[<p>Zookeeper（后续简称 zk ） 介绍自行 Google 及参考官网： [<a href="http://zookeeper.apache.org][1]；">http://zookeeper.apache.org][1]；</a></p><h2 id="一、安装-zk"><a href="#一、安装-zk" class="headerlink" title="一、安装 zk"></a>一、安装 zk</h2><pre><code># 官网下载对应版本的zk至用户目录（本文实验版本 zookeeper-3.4.9.tar.gz ）$ wget http://mirrors.hust.edu.cn/apache/zookeeper/current/zookeeper-3.4.9.tar.gz$ tar -zxvf zookeeper-3.4.9.tar.gz     # 解压文件$ cd zookeeper-3.4.9   # 进入zookeeper根目录$ mkdir data logs   # 新建目录data(数据目录)、logs(日志目录)$ vi conf/zoo.cfg   # 新建并编辑conf/zoo.cfg文件(zookeeper配置文件，默认不存在，可参考提供的文件 zoo_sample.cfg)    tickTime=2000    dataDir=/$&#123;***&#125;/zookeeper-3.4.9/data    dataLogDir=/$&#123;***&#125;/zookeeper-3.4.9/logs    clientPort=2181    initLimit=5    syncLimit=2</code></pre><span id="more"></span><h2 id="二、启动-zk"><a href="#二、启动-zk" class="headerlink" title="二、启动 zk"></a>二、启动 zk</h2><pre><code>$ cd zookeeper-3.4.9/bin  # 进入zk命令目录$ ./zkServer.sh start  # 启动zk服务$ ./zkServer.sh status # 查看zk启动状态(打印信息出现&quot;Mode: standalone&quot;，即表示zk为单点)# zk基本基本命令[启动|前台启动|停止|重启|查看状态|升级|打印cmd]$ zkServer.sh &#123;start|start-foreground|stop|restart|status|upgrade|print-cmd&#125;</code></pre><h2 id="三、配置-zk-集群"><a href="#三、配置-zk-集群" class="headerlink" title="三、配置 zk 集群"></a>三、配置 zk 集群</h2><p>现提供三台服务器（当然你也可以提供一台机器，使用不同的端口来实现），如下：<br>    # HostName:  IP<br>    server1:  10.0.0.21<br>    server2:  10.0.0.22<br>    server3:  10.0.0.23<br>首先，在每台服务器以zk单点形式进行安装，然后分别对zk配置文件 zoo.cfg 添加集群配置：<br>    # server.[myid]:[ip]:[port1]:[port2]，具体信息参考博文”zoo.cfg配置”<br>    server.1:10.0.0.21:2888:3888<br>    server.2:10.0.0.22:2888:3888<br>    server.3:10.0.0.23:2888:3888<br>其次，在每台服务器zk的配置目录conf下新建 myid 文件,同时将上一步配置的“myid”值写入对应服务器myid文件即可；如 10.0.0.21 配置的myid文件内容为“1”，后面两台类推；具体操作：<br>    # 将myid为”1”写入server1的myid文件<br>    $ echo “1” &gt; ~&#x2F;zookeeper-3.4.9&#x2F;conf&#x2F;myid </p><pre><code># 将myid为&quot;2&quot;写入server2的myid文件$ echo &quot;2&quot; &gt; ~/zookeeper-3.4.9/conf/myid# 将myid为&quot;3&quot;写入server3的myid文件$ echo &quot;3&quot; &gt; ~/zookeeper-3.4.9/conf/myid</code></pre><p>最后，分别启动或重启zk即完成集群配置，zk会自动选举leader及follower（目前的配置会是一台为leader、两台为follower，使用<code>zkServer.sh status</code>查看状态）  </p><p>[1]:<a href="http://zookeeper.apache.org/">http://zookeeper.apache.org</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Zookeeper（后续简称 zk ） 介绍自行 Google 及参考官网： [&lt;a href=&quot;http://zookeeper.apache.org][1]；&quot;&gt;http://zookeeper.apache.org][1]；&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;一、安装-zk&quot;&gt;&lt;a href=&quot;#一、安装-zk&quot; class=&quot;headerlink&quot; title=&quot;一、安装 zk&quot;&gt;&lt;/a&gt;一、安装 zk&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;# 官网下载对应版本的zk至用户目录（本文实验版本 zookeeper-3.4.9.tar.gz ）
$ wget http://mirrors.hust.edu.cn/apache/zookeeper/current/zookeeper-3.4.9.tar.gz

$ tar -zxvf zookeeper-3.4.9.tar.gz     # 解压文件
$ cd zookeeper-3.4.9   # 进入zookeeper根目录
$ mkdir data logs   # 新建目录data(数据目录)、logs(日志目录)
$ vi conf/zoo.cfg   # 新建并编辑conf/zoo.cfg文件(zookeeper配置文件，默认不存在，可参考提供的文件 zoo_sample.cfg)

    tickTime=2000
    dataDir=/$&amp;#123;***&amp;#125;/zookeeper-3.4.9/data
    dataLogDir=/$&amp;#123;***&amp;#125;/zookeeper-3.4.9/logs
    clientPort=2181
    initLimit=5
    syncLimit=2
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="tools" scheme="http://effine.cn/categories/tools/"/>
    
    
      <category term="zk" scheme="http://effine.cn/tags/zk/"/>
    
      <category term="zookeeper" scheme="http://effine.cn/tags/zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>IDEA快捷方式</title>
    <link href="http://effine.cn/2017/01/09/IdeaShortcut/"/>
    <id>http://effine.cn/2017/01/09/IdeaShortcut/</id>
    <published>2017-01-09T15:27:21.000Z</published>
    <updated>2022-05-12T14:21:01.689Z</updated>
    
    <content type="html"><![CDATA[<p>撸代码少不了IDEA，简单的IDEA快捷键记录：</p><pre><code>$ double + shift  # 双击shift，可以搜索文件及文件夹（正斜杠打头“/”）$ command + D # 复制当前行到下一行$ command + X# 剪切当前行$ command + J       # 智能提示补齐$ command +        # 查看类往上查找继承的类或实现的接口$ ctrl + H    # 显示类结构(继承)图$ ctrl + option + H         # 查看方法调用结构图$ command + B # 全局查找方法调用$ command + option + B # 查看方法的实现细节$ command + f7      # 当前文件查找方法的调用$ command + option + 方向键(左left/右right) # 返回至上、下次浏览的位置$ command + option + T      # 给代码添加if、where等语句包括起来$ command + option + V      # 给方法调用提出引用变量$ command + option + u    # 生成类集成图$ command + option + shift + u  # 生成类图 $ ctrl + tab# 切换标签页（唤醒Swither，包含打开的文件及快捷选项入口）$ command + ` # 切换打开的多个窗口$ command + option + L  # 格式化代码（若选中及格式化选中代码）$ option + enter       # 快速修复（自动导包、快速定义并列出接收方法返回值等）$ command + shift + enter   # 快速补全行尾分号、括号及方法等$ commadn + \           # 按请求的URL路径进行搜索$ command + R # 当前文件查找替换$ command + shift + R # 全局查找替换$ command + E      # 列出最近查看过文件$ command + shift + E       # 列出最近编辑过的文件$ command + shift + A       # Rest Client(打开调试用的Http等操作)$ command + shift + T   # 选择/创建对应文件的测试类$ command + shift + V   # 访问历史粘贴板$ command + shift + u   # 将选中内容进行大小写切换 $ command + W  #  关闭当前标签页$ shift + click   # 关闭点击文件$ shift + esc # 光标返回编辑框,关闭获得焦点的窗口$ F2        # 移动到下一错误代码处$ shift + F2    # 移动到上一错误代码处$ shift + f7    #  debug时遇到一行多个方法，查看执行到哪个方法</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;撸代码少不了IDEA，简单的IDEA快捷键记录：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ double + shift  # 双击shift，可以搜索文件及文件夹（正斜杠打头“/”）
$ command + D 		# 复制当前行到下一行
$ command + X		# 剪切当
      
    
    </summary>
    
    
      <category term="tools" scheme="http://effine.cn/tags/tools/"/>
    
      <category term="idea" scheme="http://effine.cn/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>Dockerfile 基本语法</title>
    <link href="http://effine.cn/2017/01/09/Dockerfile/"/>
    <id>http://effine.cn/2017/01/09/Dockerfile/</id>
    <published>2017-01-09T15:04:51.000Z</published>
    <updated>2022-05-12T14:21:01.688Z</updated>
    
    <content type="html"><![CDATA[<p>Dockerfile指令不区分大小写，默认约定大写；该文件必须以FROM命令开始，其意义为指定基础镜像；FROM命令可多次使用，表示会创建多个镜像</p><pre><code>FROM &lt;IMAGE&gt;  # 指定基础镜像MAINTAINER &lt;author&gt;  &lt;email&gt;   # 指定创建Dockerfile作者及邮箱RUN  &lt;COMMAND&gt;      # 新镜像上执行命令（每一条RUN执行的命令默认目录都是根目录&#39;/&#39;）   # 添加宿主机文件至容器内，若是压缩包会自动解压ADD  &lt;localhost dir | URL &gt; &lt;container dir&gt; # 只是添加宿主机文件至容器，不处理压缩包文件，ADD命令简化版COPY  &lt;localhost dir&gt;  &lt;container dir&gt;   WORKDIR &lt;path&gt;      # 指定RUN、CMD、ENTRYPOINT命令的工作目录</code></pre><span id="more"></span><pre><code>USER &lt;uid&gt;      # 设置镜像运行时的UIDENV &lt;key&gt; &lt;value&gt;   # 设置镜像环境变量VOLUME &lt;container path&gt;  # 设置容器待挂载目录，配合docker启动命令使用$ docker run -v &lt;localhost dir&gt;   # 表示容器目录path挂载到宿主机目录(localhost dir)$ docker run -v &lt;localhost dir&gt;:&lt;container path&gt;  # 该命令执行效果同上 EXPOSE &lt;port&gt;   # 指定容器运行时监听的端口# 容器默认执行命令，Dockerfile只允许使用一次CMD；若多个只执行最后一个ENTRYPOINT [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;, ...]ENTRYPOINT [&quot;param1&quot;,&quot;param2&quot;, ...]# 容器默认执行命令，Dockerfile只允许使用一次CMD；若多个只执行最后一个CMD [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;, ...]CMD [&quot;param1&quot;,&quot;param2&quot;, ...]CMD command param1 param2 ...</code></pre><p>注：ENTRYPOINT执行命令不会被ocker容器启动时指定命令(容器名后面接的内容)覆盖，而是作为参数传递进去(即连接到ENTRYPOINT执行命令后面)；而CMD执行命令会被Docker容器启动的命令覆盖。如果同时存在ENTRYPOINT和CMD，那么ENTRYPOINT是默认执行命令，且CMD作为ENTRYPOINT的参数；如果没有ENTRYPOINT，则CMD就是默认执行指令。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Dockerfile指令不区分大小写，默认约定大写；该文件必须以FROM命令开始，其意义为指定基础镜像；FROM命令可多次使用，表示会创建多个镜像&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;FROM &amp;lt;IMAGE&amp;gt;  # 指定基础镜像
MAINTAINER &amp;lt;author&amp;gt;  &amp;lt;email&amp;gt;   # 指定创建Dockerfile作者及邮箱
RUN  &amp;lt;COMMAND&amp;gt;      # 新镜像上执行命令（每一条RUN执行的命令默认目录都是根目录&amp;#39;/&amp;#39;）
   
# 添加宿主机文件至容器内，若是压缩包会自动解压
ADD  &amp;lt;localhost dir | URL &amp;gt; &amp;lt;container dir&amp;gt; 

# 只是添加宿主机文件至容器，不处理压缩包文件，ADD命令简化版
COPY  &amp;lt;localhost dir&amp;gt;  &amp;lt;container dir&amp;gt;   

WORKDIR &amp;lt;path&amp;gt;      # 指定RUN、CMD、ENTRYPOINT命令的工作目录
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="tools" scheme="http://effine.cn/tags/tools/"/>
    
      <category term="docker" scheme="http://effine.cn/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>TeamCity配置</title>
    <link href="http://effine.cn/2016/12/29/TeamCityConfig/"/>
    <id>http://effine.cn/2016/12/29/TeamCityConfig/</id>
    <published>2016-12-29T14:26:52.000Z</published>
    <updated>2022-05-12T14:21:01.687Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍TeamCity关于部署项目的配置，介绍一些常用功能，查看更多参考TeamCity官方文档。首先打开TeamCity界面<code>&lt;Host|IP&gt;:8111</code>，参考如下：</p><ul><li><p>创建Project(主要配置部署项目所需的外围工具，如Maven、Git等，可视当前需求配置)</p><ol><li><p>点击右上角Administration -&gt; Create Project -&gt; Manually（手动）<br><img src="/imgs/teamcity/tcc2.png" alt="创建项目"></p><span id="more"></span></li><li><p>填写项目名，自动生成项目ID -&gt; create -&gt; General Settings<br><img src="/imgs/teamcity/tcc3.png" alt="项目基本配置"><br>-&gt; Build Configurations： 构建具体项目的部署配置（常用操作);</p><p>这里的创建流程和创建Project一样，创建之后左侧的导航栏和父级Project有些差别，粒度更细，针对具体的部署配置。我们可以在左侧导航栏的”Build Steps”制作我们的构建步骤，根据需求制作不同的构建顺序；如Maven编译（Maven的配置在父级）、Command Line（运行shell命令）等。</p><p>-&gt; Build Configuration Templates： 创建构建的模板配置</p><p>-&gt; Subprojects： 在该项目下创建子项目</p></li><li><p>点击左侧导航栏<code>VCS Roots</code>版本控制系统 -&gt; Create VCS root -&gt; 选择Type of VCS（Git&#x2F;SVN或其他） -&gt; 查看高级选项<code>Show advanced options</code>，配置连接URL、用户名、密码等信息 -&gt; 点击页面底部<code>Test connection</code>测试是否可以正常连接</p></li><li><p>点击左侧导航栏<code>Parameters</code> -&gt; Add new parameter -&gt; 配置不同范围级别的常量<br><img src="/imgs/teamcity/tcc4.png" alt="配置变量"><br>– Name: 常量名称<br>-&gt; kind: 常量类型；Configuration parameter(配置级别参数)、System property(TeamCity系统级属性，使用默认加上<code>system.</code>前缀)、Environment variable(环境变量，使用默认加上<code>env.</code>前缀)<br>-&gt; Value: 常量值<br>-&gt; Spec： 配置常量格式及验证，暂未使用过</p><p>注： 定义好不同级别的常量后，可以在项目构建步骤中或添加的shell脚本中使用；用两个百分号括上常量名即可（<code>%&lt;name&gt;%</code>)；子级项目继承父级定义的参数，且子级可以重新修改父级的参数值。</p></li><li><p>点击左侧导航栏<code>Maven settings</code>，配置Maven来编译项目 -&gt; Upload settings file -&gt; 弹出框添加名称，选择待上传的mave&#x2F;conf&#x2F;setting.xml文件即可<br><img src="/imgs/teamcity/tcc5.png" alt="配置变量"></p></li><li><p>点击左侧导航栏<code>Clean-up Rules</code>，配置清理TeamCity残留文件 -&gt; 点击待配置项目尾部的<code>Edit</code><br><img src="/imgs/teamcity/tcc6.png" alt="配置项目清理规则"></p><p>根据需求可以选择不同的策略，选择<code>Custom policy</code>自定义策略：清除超过多少天前的构建；清理多少个成功构建之前的构建。当然你可配置每天定时清理：右上角Administration -&gt; 右侧导航栏Clean-up Settings -&gt; 配置</p></li></ol></li><li><p>配置TeamCity插件</p></li></ul><p>在官方提供的插件库<a href="https://plugins.jetbrains.com/?teamcity">https://plugins.jetbrains.com/?teamcity</a>搜索下载你需要安装的插件，然后上传你下载的插件至安装的TeamCity即可: 点击右上角Administration -&gt; 点击左侧导航栏底部的<code>Plugins List</code> -&gt; <code>Upload plugin zip</code> -&gt; 填写名称，选择插件文件上传即可<br><img src="/imgs/teamcity/tcc7.png" alt="安装插件"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍TeamCity关于部署项目的配置，介绍一些常用功能，查看更多参考TeamCity官方文档。首先打开TeamCity界面&lt;code&gt;&amp;lt;Host|IP&amp;gt;:8111&lt;/code&gt;，参考如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;创建Project(主要配置部署项目所需的外围工具，如Maven、Git等，可视当前需求配置)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;点击右上角Administration -&amp;gt; Create Project -&amp;gt; Manually（手动）&lt;br&gt;&lt;img src=&quot;/imgs/teamcity/tcc2.png&quot; alt=&quot;创建项目&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="tools" scheme="http://effine.cn/categories/tools/"/>
    
    
      <category term="tools" scheme="http://effine.cn/tags/tools/"/>
    
      <category term="teamcity" scheme="http://effine.cn/tags/teamcity/"/>
    
  </entry>
  
  <entry>
    <title>TeamCity安装</title>
    <link href="http://effine.cn/2016/12/29/TeamCityInstall/"/>
    <id>http://effine.cn/2016/12/29/TeamCityInstall/</id>
    <published>2016-12-29T14:15:06.000Z</published>
    <updated>2022-05-12T14:21:01.688Z</updated>
    
    <content type="html"><![CDATA[<p>TeamCity安装很简单，安装之前必须先安装JDK；首先去官网(<a href="https://www.jetbrains.com/teamcity/)%E4%B8%8B%E8%BD%BD%E5%AF%B9%E5%BA%94%E7%B3%BB%E7%BB%9F%E7%89%88%E6%9C%AC%E6%96%87%E4%BB%B6">https://www.jetbrains.com/teamcity/)下载对应系统版本文件</a>: <code>TeamCity-&lt;version&gt;.tag.gz</code>，我下载的版本为10.0.4；然后按如下步骤进行：</p><pre><code>$ tar -zxvf TeamCity-&lt;version&gt;.tag.gz -C &lt;dist dir&gt;   # 解压安装包$ cd &lt;dist dir&gt;/TeamCity/bin        # 进入TeamCity的bin目录$ ./runAll.sh (start | stop [force])    # 启动、停止(强制)</code></pre><p>若以上步骤无错即可访问TeamCity界面：<code>&lt;Host|IP&gt;:8111</code>，其默认访问端口为8111；若需修改参考(修改配置文件前需停止TeamCity，修改完成再重新启动)：</p><pre><code>$ vi TeamCity/conf/server.xml # 编辑server.xml配置文件</code></pre><span id="more"></span><p><img src="/imgs/teamcity/tcc1.png" alt="配置访问端口"></p><p>首次访问该地址会进入配置TeamCity的数据目录页：<br><img src="/imgs/teamcity/tc1.png" alt="设置配置数据目录"></p><p>数据目录默认为<code>/home/&lt;user&gt;/.BuildServer</code>，若需修改参考：</p><pre><code># 修改配置文件属性teamcity.data.path即可$ vi TeamCity/conf/teamcity-startup.properties</code></pre><p>我们使用默认目录进入下一步；设置存储使用的数据库(默认为HSQLDB)，当然你可选择其提供的PostgreSQL\MYSQL\Oracle\MS SQL Server<br><img src="/imgs/teamcity/tc2.png" alt="选择数据库"></p><p>我们选择默认数据库进入下一步；此时，它会初始化数据库及服务组件，稍等片刻即可进入选择协议license页面，点击接受Accept继续；将进入创建用户页面：<br><img src="/imgs/teamcity/tc3.png" alt="创建用户"></p><p>填写完用户名密码后创建用户，即可进入“My Setting &amp; Tools”配置个人信息等信息，点击右上角的”Administration”进入选项Projects即可创建Project；至此，TeamCity的安装说明已介绍完成。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;TeamCity安装很简单，安装之前必须先安装JDK；首先去官网(&lt;a href=&quot;https://www.jetbrains.com/teamcity/)%E4%B8%8B%E8%BD%BD%E5%AF%B9%E5%BA%94%E7%B3%BB%E7%BB%9F%E7%89%88%E6%9C%AC%E6%96%87%E4%BB%B6&quot;&gt;https://www.jetbrains.com/teamcity/)下载对应系统版本文件&lt;/a&gt;: &lt;code&gt;TeamCity-&amp;lt;version&amp;gt;.tag.gz&lt;/code&gt;，我下载的版本为10.0.4；然后按如下步骤进行：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ tar -zxvf TeamCity-&amp;lt;version&amp;gt;.tag.gz -C &amp;lt;dist dir&amp;gt;   # 解压安装包
$ cd &amp;lt;dist dir&amp;gt;/TeamCity/bin        # 进入TeamCity的bin目录
$ ./runAll.sh (start | stop [force])    # 启动、停止(强制)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;若以上步骤无错即可访问TeamCity界面：&lt;code&gt;&amp;lt;Host|IP&amp;gt;:8111&lt;/code&gt;，其默认访问端口为8111；若需修改参考(修改配置文件前需停止TeamCity，修改完成再重新启动)：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ vi TeamCity/conf/server.xml 		# 编辑server.xml配置文件
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="tools" scheme="http://effine.cn/categories/tools/"/>
    
    
      <category term="tools" scheme="http://effine.cn/tags/tools/"/>
    
      <category term="teamcity" scheme="http://effine.cn/tags/teamcity/"/>
    
  </entry>
  
  <entry>
    <title>Gradle Commands</title>
    <link href="http://effine.cn/2016/07/16/GradleCommands/"/>
    <id>http://effine.cn/2016/07/16/GradleCommands/</id>
    <published>2016-07-16T12:37:54.000Z</published>
    <updated>2022-05-12T14:21:01.678Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7xlmfk.com1.z0.glb.clouddn.com/images/article/gradle.svg" alt="Gradle"></p><p>常用的gradle命令集锦：</p><pre><code>$ gradle        # 欢迎信息$ gradle [-v | --version]       # 显示gradle相关版本及相关环境版本信息$ gradle eclipse        # 构建eclipse项目开发环境(创建.classpash等文件)$ gradle tasks      # 得到可运行的任务和描述的完整列表$ gradle &lt;task&gt;     # 运行build.gradle中定义的任务$ gradle assemble       # 编译程序源码打包生成jar文件，不执行单元测试$ gradle build      # 编译程序源码打包生成jar文件,执行单元测试$ gradle compileJava        # 编译程序中的源代码$ gradle clean      # 清理项目构建文件(即就是build文件夹)$ gradle test       # 编译$ gradle check      # 代码质量检查</code></pre><span id="more"></span><p>使用技巧：<br>。 maven项目秒转成gradle项目:</p><pre><code>$ gradle setupBuild --type pom# gradle1.7的写法$ gradle init --type pom# gradle2.0的写法</code></pre><p>。 设置gradle本地仓库路径： </p><pre><code>设置环境变量即可： GRADLE_USER_HOME = dest-path(目标目录)</code></pre><p>题图来源：gradle官方 <a href="https://gradle.org/">https://gradle.org/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xlmfk.com1.z0.glb.clouddn.com/images/article/gradle.svg&quot; alt=&quot;Gradle&quot;&gt;&lt;/p&gt;
&lt;p&gt;常用的gradle命令集锦：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ gradle        # 欢迎信息
$ gradle [-v | --version]       # 显示gradle相关版本及相关环境版本信息
$ gradle eclipse        # 构建eclipse项目开发环境(创建.classpash等文件)
$ gradle tasks      # 得到可运行的任务和描述的完整列表
$ gradle &amp;lt;task&amp;gt;     # 运行build.gradle中定义的任务
$ gradle assemble       # 编译程序源码打包生成jar文件，不执行单元测试
$ gradle build      # 编译程序源码打包生成jar文件,执行单元测试
$ gradle compileJava        # 编译程序中的源代码
$ gradle clean      # 清理项目构建文件(即就是build文件夹)
$ gradle test       # 编译
$ gradle check      # 代码质量检查
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="tools" scheme="http://effine.cn/categories/tools/"/>
    
    
      <category term="gradle" scheme="http://effine.cn/tags/gradle/"/>
    
      <category term="commond" scheme="http://effine.cn/tags/commond/"/>
    
  </entry>
  
  <entry>
    <title>Java try catch返回值分析</title>
    <link href="http://effine.cn/2016/06/15/TrycatchReturn/"/>
    <id>http://effine.cn/2016/06/15/TrycatchReturn/</id>
    <published>2016-06-15T15:40:22.000Z</published>
    <updated>2022-05-12T14:21:01.685Z</updated>
    
    <content type="html"><![CDATA[<p>简单分析异常捕获try catch的try和finally中return对结果的影响</p><p><img src="/imgs/article/TryCatchFinally.png" alt="try catch return"></p><span id="more"></span><p>参考程序分析：</p><pre><code>public class TryCatchTest &#123;    @Test    public void testMethod() &#123;        int i = method1();        System.out.println(i);    &#125;    public int method1() &#123;        int a = 1;        try &#123;            return ++a;        &#125; catch (Exception e) &#123;            e.printStackTrace();        &#125; finally &#123;            ++a;        &#125;        return a;    &#125;&#125;</code></pre><p>junit测试打印结果：2<br>分析：为什么打印的结果是2不是3呢？可以使用debug分析得出，在执行method1方法try中的<code>++a</code>之后（a的值为2，同时将返回值2保存到局部变量中），程序并没有立即执行return，而是紧接着执行了finally的<code>++a</code>(此时a的值为3)，然后再执行try中的return(返回局部变量中的2)；</p><p>若对程序进行改动，在finally中加入return分析返回值是多少？</p><pre><code>public class TryCatchTest &#123;    @Test    public void testMethod() &#123;        int i = method1();        System.out.println(i);    &#125;    public int method1() &#123;        int a = 1;        try &#123;            return ++a;        &#125; catch (Exception e) &#123;            e.printStackTrace();        &#125; finally &#123;            return ++a;        &#125;    &#125;&#125;</code></pre><p>此时，junit测试打印结果为：3<br>分析：当程序执行到finally中的<code>++a</code> (此时a的值为3)，紧接着执行finally中的return；所以，try和finally中同时出现return时，try中的return将会失效；</p><p>题图来源：<a href="http://kuroeveryday.blogspot.jp/2014/12/Try-Catch-Finally.html">http://kuroeveryday.blogspot.jp/2014/12/Try-Catch-Finally.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简单分析异常捕获try catch的try和finally中return对结果的影响&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/imgs/article/TryCatchFinally.png&quot; alt=&quot;try catch return&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http://effine.cn/categories/java/"/>
    
    
      <category term="try" scheme="http://effine.cn/tags/try/"/>
    
      <category term="catch" scheme="http://effine.cn/tags/catch/"/>
    
      <category term="finally" scheme="http://effine.cn/tags/finally/"/>
    
  </entry>
  
  <entry>
    <title>nginx commands</title>
    <link href="http://effine.cn/2016/01/06/NginxCommands/"/>
    <id>http://effine.cn/2016/01/06/NginxCommands/</id>
    <published>2016-01-06T10:08:00.000Z</published>
    <updated>2022-05-12T14:21:01.685Z</updated>
    
    <content type="html"><![CDATA[<p>nginx帮助信息如其本身性能一样轻巧清晰简明，无需更多的额外说明； 使用 <code>nginx -?</code> 到的帮助信息:</p><pre><code>nginx version: nginx/1.8.0Usage: nginx [-?hvVtq] [-s signal] [-c filename] [-p prefix] [-g directives]Options:  -?,-h         :  this help  -v            :  show version and exit  -V            :  show version and configure options then exit  -t            :  test configuration and exit  -q            :  suppress non-error messages during configuration testing  -s signal     :  send signal to a master process: stop, quit, reopen, reload  -p prefix     :  set prefix path (default: /usr/local/nginx/)  -c filename   :  set configuration file (default: conf/nginx.conf)  -g directives :  set global directives out of configuration file</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;nginx帮助信息如其本身性能一样轻巧清晰简明，无需更多的额外说明； 使用 &lt;code&gt;nginx -?&lt;/code&gt; 到的帮助信息:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nginx version: nginx/1.8.0
Usage: nginx [-?hvVtq] [-s 
      
    
    </summary>
    
      <category term="tools" scheme="http://effine.cn/categories/tools/"/>
    
    
      <category term="tools" scheme="http://effine.cn/tags/tools/"/>
    
      <category term="nginx" scheme="http://effine.cn/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>nginx加入系统服务</title>
    <link href="http://effine.cn/2016/01/04/NginxService/"/>
    <id>http://effine.cn/2016/01/04/NginxService/</id>
    <published>2016-01-04T14:08:00.000Z</published>
    <updated>2022-05-12T14:21:01.684Z</updated>
    
    <content type="html"><![CDATA[<p>将nginx加入系统服务，可用很方便的对nginx进行启动和停止等操作；本环境nginx安装在&#x2F;usr&#x2F;local&#x2F;nginx目录，若你未安装在该目录需修改下面的shell脚本 <code>DAEMON=/usr/local/nginx/sbin/$NAME</code> 语句，指定nginx的安装目录。</p><p>新建nginx文件,添加内容(为方便显示对内容进行了缩进，你可以使用shift+tab来取消缩进至文件顶格)：</p><span id="more"></span><pre><code>#! /bin/bash# chkconfig: 35 85 15  # description: Nginx is an HTTP(S) server, HTTP(S) reverseset -ePATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/binDESC=&quot;nginx daemon&quot;NAME=nginxDAEMON=/usr/local/nginx/sbin/$NAMESCRIPTNAME=/etc/init.d/$NAMEtest -x $DAEMON || exit 0d_start()&#123;    $DAEMON || echo -n &quot; already running&quot;&#125;d_stop() &#123;    $DAEMON -s quit || echo -n &quot; not running&quot;&#125;d_reload() &#123;    $DAEMON -s reload || echo -n &quot; counld not reload&quot;&#125;case &quot;$1&quot; instart)    echo -n &quot;Starting $DESC:$NAME&quot;    d_start    echo &quot;.&quot;;;stop)    echo -n &quot;Stopping $DESC:$NAME&quot;    d_stop    echo &quot;.&quot;;;reload)    echo -n &quot;Reloading $DESC configuration...&quot;    d_reload    echo &quot;reloaded.&quot;;;restart)    echo -n &quot;Restarting $DESC: $NAME&quot;    d_stop    sleep 2    d_start    echo &quot;.&quot;;;*)    echo &quot;Usage: $SCRIPTNAME &#123;start|stop|restart|reload&#125;&quot; &gt;&amp;2    exit 3;;esacexit 0</code></pre><p>然后执行以下命令：</p><pre><code># 复制shell脚本nginx文件到目录/etc/rc.d/init.d/中cp ./nginx  /etc/rc.d/init.d chmod +x  /etc/rc.d/init.d/nginx # 设置文件可执行权限chkconfig --add nginx  # 添加至系统服务</code></pre><p>任何目录执行命令即可操作nginx：</p><pre><code>service nginx &lt;start | stop | restart | reload &gt; # &lt;启动|停止|重启|重载&gt; nginx</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;将nginx加入系统服务，可用很方便的对nginx进行启动和停止等操作；本环境nginx安装在&amp;#x2F;usr&amp;#x2F;local&amp;#x2F;nginx目录，若你未安装在该目录需修改下面的shell脚本 &lt;code&gt;DAEMON=/usr/local/nginx/sbin/$NAME&lt;/code&gt; 语句，指定nginx的安装目录。&lt;/p&gt;
&lt;p&gt;新建nginx文件,添加内容(为方便显示对内容进行了缩进，你可以使用shift+tab来取消缩进至文件顶格)：&lt;/p&gt;
    
    </summary>
    
      <category term="tools" scheme="http://effine.cn/categories/tools/"/>
    
    
      <category term="tools" scheme="http://effine.cn/tags/tools/"/>
    
      <category term="nginx" scheme="http://effine.cn/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Spring配置MessageConvertor</title>
    <link href="http://effine.cn/2015/12/11/SpringMessageConverotr/"/>
    <id>http://effine.cn/2015/12/11/SpringMessageConverotr/</id>
    <published>2015-12-10T16:20:54.000Z</published>
    <updated>2022-05-12T14:21:01.683Z</updated>
    
    <content type="html"><![CDATA[<p>开发中经常使用Fastjson来进行json数据的封装，不过Spring默认采用的是Jackson，如果需要定义fastjson为默认，你可以进行如下操作：</p><p>在你spring启动注解的配置文件中，进行如下配置：</p><pre><code>&lt;mvc:annotation-driven&gt;    &lt;mvc:message-converters&gt;        &lt;bean            class=&quot;com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter&quot;&gt;            &lt;property name=&quot;supportedMediaTypes&quot;&gt;                &lt;list&gt;                    &lt;value&gt;text/plain;charset=UTF-8&lt;/value&gt;                    &lt;value&gt;text/html;charset=UTF-8&lt;/value&gt;                    &lt;value&gt;application/json&lt;/value&gt;                &lt;/list&gt;            &lt;/property&gt;            &lt;property name=&quot;features&quot;&gt;                &lt;list&gt;                    &lt;value&gt;WriteMapNullValue&lt;/value&gt;                    &lt;value&gt;QuoteFieldNames&lt;/value&gt;                &lt;/list&gt;            &lt;/property&gt;        &lt;/bean&gt;    &lt;/mvc:message-converters&gt;&lt;/mvc:annotation-driven&gt;</code></pre><span id="more"></span><p>当然如果配置文件xml顶部声明版本为3.0或者spring版本为3.0都可能出现如下错误</p><pre><code>Element &#39;mvc:annotation-driven&#39; must have no character or element information item [children], because the type&#39;s content type is empty.</code></pre><p>所以，尽量升级spring为当前文档的最新版本,将xml的声明修改为3.1及以上！</p><pre><code>&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;xmlns:context=&quot;http://www.springframework.org/schema/context&quot; xmlns:p=&quot;http://www.springframework.org/schema/p&quot;xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans-3.2.xsd        http://www.springframework.org/schema/context        http://www.springframework.org/schema/context/spring-context.xsd        http://www.springframework.org/schema/mvc        http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd&quot;&gt;</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开发中经常使用Fastjson来进行json数据的封装，不过Spring默认采用的是Jackson，如果需要定义fastjson为默认，你可以进行如下操作：&lt;/p&gt;
&lt;p&gt;在你spring启动注解的配置文件中，进行如下配置：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;mvc:annotation-driven&amp;gt;
    &amp;lt;mvc:message-converters&amp;gt;
        &amp;lt;bean
            class=&amp;quot;com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter&amp;quot;&amp;gt;
            &amp;lt;property name=&amp;quot;supportedMediaTypes&amp;quot;&amp;gt;
                &amp;lt;list&amp;gt;
                    &amp;lt;value&amp;gt;text/plain;charset=UTF-8&amp;lt;/value&amp;gt;
                    &amp;lt;value&amp;gt;text/html;charset=UTF-8&amp;lt;/value&amp;gt;
                    &amp;lt;value&amp;gt;application/json&amp;lt;/value&amp;gt;
                &amp;lt;/list&amp;gt;
            &amp;lt;/property&amp;gt;
            &amp;lt;property name=&amp;quot;features&amp;quot;&amp;gt;
                &amp;lt;list&amp;gt;
                    &amp;lt;value&amp;gt;WriteMapNullValue&amp;lt;/value&amp;gt;
                    &amp;lt;value&amp;gt;QuoteFieldNames&amp;lt;/value&amp;gt;
                &amp;lt;/list&amp;gt;
            &amp;lt;/property&amp;gt;
        &amp;lt;/bean&amp;gt;
    &amp;lt;/mvc:message-converters&amp;gt;
&amp;lt;/mvc:annotation-driven&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="java" scheme="http://effine.cn/categories/java/"/>
    
    
      <category term="java" scheme="http://effine.cn/tags/java/"/>
    
      <category term="spring" scheme="http://effine.cn/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>linux安装nginx</title>
    <link href="http://effine.cn/2015/11/17/NginxInstall/"/>
    <id>http://effine.cn/2015/11/17/NginxInstall/</id>
    <published>2015-11-17T10:08:00.000Z</published>
    <updated>2018-10-31T08:24:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>若你的项目需要用到负载均衡、反向代理、静态文件服务器等功能，赶快入手nginx，她能超轻量级的完成你所需功能；现我们开始第一步安装 nginx： <a href="http://nginx.org/">http://nginx.org/</a> （以下讲解环境使用centos，其他环境安装方式大同小异）</p><pre><code>$ wget http://nginx.org/download/nginx-1.8.0.tar.gz # 下载相应版本nginx$ tar -zxvf nginx-1.8.0.tar.gz [-C &lt;dir&gt;] # 解压[指定目录]$ cd nginx-1.8.0$ ./configure --prefix=/usr/local/nginx  # prefix指定安装目录</code></pre><span id="more"></span><p>安装过程出现的错误解析：</p><pre><code># 错误 1checking for C compiler ... not found./configure: error: C compiler cc is not found</code></pre><p>分析&#x2F;解决：不存在C编译环境，安装即可：yum install gcc (如果不存在C++编译环境，使用命令安装即可: yum install gcc-c++)</p><pre><code># 错误 2./configure: error: the HTTP gzip module requires the zlib library.You can either disable the module by using --without-http_gzip_moduleoption, or install the zlib library into the system, or build the zlib librarystatically from the source with nginx by using --with-zlib=&lt;path&gt; option.</code></pre><p>分析&#x2F;解决：不存在zlib library；安装即可：yum install -y zlib-devel</p><pre><code># 错误 3./configure: error: the HTTP rewrite module requires the PCRE library.You can either disable the module by using --without-http_rewrite_moduleoption, or install the PCRE library into the system, or build the PCRE librarystatically from the source with nginx by using --with-pcre=&lt;path&gt; option.</code></pre><p>分析&#x2F;解决：缺少PCRE library; 那下载源码安装<a href="http://www.pcre.org/">PCRE library</a>即可(注意下载的是prce而不是prce2)，下载解压安装：</p><pre><code>$ cd pcre-&#123;version&#125;$ ./configure$ make &amp;&amp; make install</code></pre><p>当然你也可以使用命令： yum install pcre</p><pre><code># 错误 4./configure: error: the HTTP cache module requires md5 functionsfrom OpenSSL library.   You can either disable the module by using--without-http-cache option, or install the OpenSSL library into the system,or build the OpenSSL library statically from the source with nginx by using--with-http_ssl_module --with-openssl=&lt;path&gt; options.</code></pre><p>分析&#x2F;解决： 缺少OpenSSL library; 安装：yum install openssl openssl-devel </p><pre><code># 错误5nginx: [emerg] bind() to 0.0.0.0:9000 failed (48: Address already in use)</code></pre><p>解决：地址(端口)已经被使用，修改端口重新加载nginx（nginx -s reload）;有可能是需要root用户启动，可以尝试</p><pre><code># 错误6nginx: [emerg] open() &quot;/usr/local/nginx/logs/nginx.pid&quot; failed (13: Permission denied)</code></pre><p>解决： 没有权限，使用root用户启动</p><p>根据nginx源码安装延伸</p><pre><code>. configure # 该文件是软件作者或机构提供的shell脚本，用于初始化软件安装必需环境. make# 编译源码，生成Makefile. make install    # 读取Makefile中的指令，开始安装</code></pre><p>若文章阐述有误，欢迎指正；我会及时修正，以误他人！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;若你的项目需要用到负载均衡、反向代理、静态文件服务器等功能，赶快入手nginx，她能超轻量级的完成你所需功能；现我们开始第一步安装 nginx： &lt;a href=&quot;http://nginx.org/&quot;&gt;http://nginx.org/&lt;/a&gt; （以下讲解环境使用centos，其他环境安装方式大同小异）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ wget http://nginx.org/download/nginx-1.8.0.tar.gz 	# 下载相应版本nginx
$ tar -zxvf nginx-1.8.0.tar.gz [-C &amp;lt;dir&amp;gt;] 	# 解压[指定目录]
$ cd nginx-1.8.0
$ ./configure --prefix=/usr/local/nginx  	# prefix指定安装目录
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="tools" scheme="http://effine.cn/categories/tools/"/>
    
    
      <category term="tools" scheme="http://effine.cn/tags/tools/"/>
    
      <category term="nginx" scheme="http://effine.cn/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Git Remote</title>
    <link href="http://effine.cn/2015/11/17/GitRemote/"/>
    <id>http://effine.cn/2015/11/17/GitRemote/</id>
    <published>2015-11-17T07:08:24.000Z</published>
    <updated>2018-10-31T08:24:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>Git Remote命令官方解释是：管理和设置当前分支跟踪的仓库；原文<code>Manage the set of repositories (&quot;remotes&quot;) whose branches you track.</code> </p><pre><code>$ git remote        # 查看当前分支跟踪(远程)仓库别名(一般为origin，以下统一采用该别名)$ git remote &lt;-v | --verbose&gt;     # 查看跟踪仓库别名及地址$ git remote show &lt;origin&gt;    # 查看跟踪仓库地址及分支情况$ git remote add &lt;origin&gt; &lt;url&gt;   # 添加跟踪仓库别名及对应的跟踪地址 # 更新指定跟踪仓库名的地址$ git remote set-url [--push] &lt;origin&gt; &lt;newurl&gt; [&lt;oldurl&gt;] $ git remote set-url --add &lt;origin&gt; &lt;newurl&gt;$ git remote set-url --delete &lt;origin&gt; &lt;url&gt;    [--push]                # manipulate push URLs(操作push的URL)    [--add]                # add URL    [--delete]              # delete URLs$ git remote &lt;remove|rm&gt; &lt;origin&gt;     # 删除指定的跟踪仓库名$ git remote rename &lt;old&gt; &lt;new&gt;       # 重命名跟踪仓库名# 设置或删除跟踪仓库的HEAD指向指定分支,命令行中的圆括号表示必选其中之一执行$ git remote set-head &lt;origin&gt; (-a | --auto | -d | --delete | &lt;branch&gt;)     [-a|--auto]         # set refs/remotes/&lt;name&gt;/HEAD according to remote    [-d|--delete]       # delete refs/remotes/&lt;name&gt;/HEAD# 清理存在过但现在不存在的本地跟踪分支的引用$ git remote prune [&lt;options&gt;] &lt;origin&gt;     [-n|--dry-run]         # dry run(试运行，彩排)</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Git Remote命令官方解释是：管理和设置当前分支跟踪的仓库；原文&lt;code&gt;Manage the set of repositories (&amp;quot;remotes&amp;quot;) whose branches you track.&lt;/code&gt; &lt;/p&gt;
&lt;pre&gt;
      
    
    </summary>
    
      <category term="git" scheme="http://effine.cn/categories/git/"/>
    
    
      <category term="git" scheme="http://effine.cn/tags/git/"/>
    
      <category term="remote" scheme="http://effine.cn/tags/remote/"/>
    
  </entry>
  
  <entry>
    <title>Git版本管理</title>
    <link href="http://effine.cn/2015/11/17/GitVersionManage/"/>
    <id>http://effine.cn/2015/11/17/GitVersionManage/</id>
    <published>2015-11-17T06:53:27.000Z</published>
    <updated>2022-05-23T16:53:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>Git知识是程序员必备的技能，收集了网上比较好的Git教程供大家学习：</p><ul><li><p>官方网站：<a href="https://git-scm.com/">https://git-scm.com/</a></p></li><li><p>猴子都能懂的Git入门：<a href="https://backlog.com/git-tutorial/cn/">https://backlog.com/git-tutorial/cn/</a></p></li><li><p>图解Git： <a href="http://marklodato.github.io/visual-git-guide/index-zh-cn.html">http://marklodato.github.io/visual-git-guide/index-zh-cn.html</a> </p></li><li><p>Git工作流：<a href="https://github.com/xirong/my-git/blob/master/git-workflow-tutorial.md">https://github.com/xirong/my-git/blob/master/git-workflow-tutorial.md</a></p></li><li><p>易百教程： <a href="https://www.yiibai.com/git">https://www.yiibai.com/git</a></p></li><li><p>Github作者贡献：<a href="https://geeeeeeeeek.github.io/git-recipes/">https://geeeeeeeeek.github.io/git-recipes/</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Git知识是程序员必备的技能，收集了网上比较好的Git教程供大家学习：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;官方网站：&lt;a href=&quot;https://git-scm.com/&quot;&gt;https://git-scm.com/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;猴子都能懂的G
      
    
    </summary>
    
      <category term="git" scheme="http://effine.cn/categories/git/"/>
    
    
      <category term="tools" scheme="http://effine.cn/tags/tools/"/>
    
      <category term="git" scheme="http://effine.cn/tags/git/"/>
    
  </entry>
  
</feed>
